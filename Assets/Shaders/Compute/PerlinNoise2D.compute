#define RANDOM_NUMS 256

uniform int perm[RANDOM_NUMS] =
{
    151, 160, 137, 91, 90, 15,
    131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10, 23,
    190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33,
    88, 237, 149, 56, 87, 174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166,
    77, 146, 158, 231, 83, 111, 229, 122, 60, 211, 133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244,
    102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208, 89, 18, 169, 200, 196,
    135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123,
    5, 202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42,
    223, 183, 170, 213, 119, 248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9,
    129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232, 178, 185, 112, 104, 218, 246, 97, 228,
    251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249, 14, 239, 107,
    49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254,
    138, 236, 205, 93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180
};

float hash(float2 p)
{
    float h = dot(p, float2(127.1, 311.7));
    return frac(sin(h) * 43758.5453123);
}

float noise(float2 p)
{
    int2 Pi = int2(floor(p)) & 255;
    float2 Pf = frac(p);

    float2 ix = float2(Pi.x, Pi.x + 1);
    float2 iy = float2(Pi.y, Pi.y + 1);

    float2 fx = Pf * Pf * (3.0 - 2.0 * Pf);
    float2 fy = Pf * Pf * (3.0 - 2.0 * Pf.yx);

    int a = perm[perm[Pi.x] + Pi.y];
    int b = perm[perm[Pi.x + 1] + Pi.y];
    int aa = perm[a + Pi.y + 1];
    int ab = perm[b + Pi.y + 1];

    float4 ix1 = lerp(float4(a, b, a, b), float4(aa, ab, aa, ab), fx.x);
    float2 ix2 = lerp(ix1.xy, ix1.zw, fx.y);

    return lerp(ix2.x, ix2.y, fy.y);
}

float CalculatePerlinNoise2D(float2 pos, float amplitude, float frequency, float persistence, int octaves)
{
    float total = 0.0;
    float maxAmplitude = 0.0;
    float amplitudeFactor = 1.0;

    for (int i = 0; i < octaves; i++)
    {
        total += noise(pos * frequency) * amplitudeFactor;
        frequency *= 2.0;
        maxAmplitude += amplitudeFactor;
        amplitudeFactor *= persistence;
    }

    return total / maxAmplitude * amplitude;
}
