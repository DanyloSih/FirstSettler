#pragma kernel GenerateMesh

#include "MarchingCubesBase.compute"
#include "../Structs/VoxelData.compute"
#include "../Structs/VertexInfo.compute"
#include "../Structs/RectPrism.compute"
#include "../Structs/DebugData.compute"
#include "../BufferHandlers/ChunkSizePrisms.compute"
#include "../BufferHandlers/ChunkDataUser.compute"

#define MAX_VERTICES_PER_MARCH 15

RWStructuredBuffer<float3> Vertices;
RWStructuredBuffer<VertexInfo> VerticesInfo;
float Surface;

float GetOffset(float v1, float v2)
{
    float delta = v2 - v1;
    return (delta == 0.0f) ? Surface : (Surface - v1) / delta;
}

[numthreads(1, 64, 1)]
void GenerateMesh(uint3 id : SV_DispatchThreadID)
{
    RectPrism chunkCubesPrism = GetChunkCubesPrism();
    RectPrism chunkVoxelsPrism = GetChunkVoxelsPrism();
    
    uint chunkID = id.x;
    uint cubeIndex = id.y;
    
    if (cubeIndex >= chunkCubesPrism.Volume)
    {
        return;
    }
    
    uint3 cubePos = IndexToPoint(chunkCubesPrism, cubeIndex);
    uint voxelIndex = PointToIndex(chunkVoxelsPrism, cubePos);
    uint chunkVoxelsOffset = chunkVoxelsPrism.Volume * chunkID;
    int materialHash = ChunkData[chunkVoxelsOffset + voxelIndex].MaterialHash;
    
    int chunkVerticesOffset = chunkCubesPrism.Volume * 15 * chunkID;
    int meshPartIndexStart = chunkVerticesOffset + cubeIndex * 15;
    float offset = 0.0f;
    int i = 0;
    
    for (i = 0; i < 15; i++)
    {
        VertexInfo vi;
        vi.IsCorrect = false;
        vi.MaterialHash = materialHash;
        VerticesInfo[meshPartIndexStart + i] = vi;
        Vertices[meshPartIndexStart + i] = 0;
    }
    
    float3 localEdgeVertexBuffer[12];
        
    VoxelsCube vc;
    vc = GetCubeVoxelsVolume(chunkVoxelsPrism, cubePos, chunkVoxelsOffset);
    
    int flagIndex = 0;
    for (i = 0; i < 8; i++) 
        if (vc.VoxelsVolume[i] <= Surface) 
            flagIndex |= 1 << i;
    
    int edgeFlags = CubeEdgeFlags[flagIndex];
    if (edgeFlags == 0)
        return;
    
    float3 edgeVert = 0;
    for (i = 0; i < 12; i++)
    {
        if ((edgeFlags & (1 << i)) != 0)
        {
            offset = GetOffset(vc.VoxelsVolume[EdgeConnection[i][0]], vc.VoxelsVolume[EdgeConnection[i][1]]);
            
            edgeVert.x = cubePos.x + VertexOffset[EdgeConnection[i][0]][0] + offset * EdgeDirection[i][0];
            edgeVert.y = cubePos.y + VertexOffset[EdgeConnection[i][0]][1] + offset * EdgeDirection[i][1];
            edgeVert.z = cubePos.z + VertexOffset[EdgeConnection[i][0]][2] + offset * EdgeDirection[i][2];
            localEdgeVertexBuffer[i] = edgeVert;
        }
    }
    
    for (int b = 0; b < 15; b++)
    {
        int globalB = meshPartIndexStart + b;
        
        if (TriangleConnectionTable[flagIndex][b] < 0)
            break;
            
        VertexInfo vi;
        vi.IsCorrect = true;
        vi.MaterialHash = materialHash;
        VerticesInfo[globalB] = vi;
        Vertices[globalB] = localEdgeVertexBuffer[TriangleConnectionTable[flagIndex][b]];
    }
}

