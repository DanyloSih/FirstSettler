#pragma kernel CSMain
#include "Noise/ClassicNoise2D.hlsl"
#include "RectPrism.compute"

struct VoxelData
{
    float Volume;
    int MaterialHash;
};

struct HeightAndMaterialHashAssociation
{
    float Height;
    int MaterialHash;
};

RWStructuredBuffer<VoxelData> ChunkData;
StructuredBuffer<HeightAndMaterialHashAssociation> HeightAndHashAssociations;
StructuredBuffer<HeightAndMaterialHashAssociation> MinMaxAssociations;
StructuredBuffer<RectPrism> ChunkSizeAndChunkOffset;
StructuredBuffer<int3> LocalChunksPositions;
int AssociationsCount;
int Octaves;
float Persistence;
float Frequency;
float Amplitude;
float MaxHeight;
float MinHeight;

RectPrism GetChunkRectPrism()
{
    return ChunkSizeAndChunkOffset[0];
}

RectPrism GetChunkOffsetRectPrism()
{
    return ChunkSizeAndChunkOffset[1];
}


int GetMaterialKeyHashByHeight(float height)
{
    HeightAndMaterialHashAssociation min = MinMaxAssociations[0];
    HeightAndMaterialHashAssociation max = MinMaxAssociations[1];
    
    if (height >= max.Height)
    {
        return max.MaterialHash;
    }
    else if (height <= min.Height)
    {
        return min.MaterialHash;
    }
    else
    {  
        int result = 0;
        if (AssociationsCount == 0)
        {
            return result;
        }
        
        for (int i = AssociationsCount - 1; i >= 0; i--)
        {
            HeightAndMaterialHashAssociation association = HeightAndHashAssociations[i];
            
            if (association.Height > height)
            {
                result = association.MaterialHash;
                break;
            }
        }
        
        return result;
    }
}

[numthreads(1, 256, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{    
    RectPrism chunkRectPrism = GetChunkRectPrism();
    if (id.y >= chunkRectPrism.Volume)
    { 
        return;
    }
    
    RectPrism chunkOffsetRectPrism = GetChunkOffsetRectPrism();
    
    int3 localChunkPos = LocalChunksPositions[id.x];
    int3 localVoxelPos = IndexToPoint(chunkRectPrism, id.y);
    int3 globalChunkPos = localChunkPos * chunkOffsetRectPrism.Size;
    int3 globalVoxelPos = globalChunkPos + localVoxelPos;
    int i = id.x * chunkRectPrism.Volume + id.y;
     
    float heightThreshold = MinHeight + ClassicNoise(float2(globalVoxelPos.x, globalVoxelPos.z) / Frequency) * MaxHeight;
    
        //, Amplitude, Frequency, Persistence, Octaves) * MaxHeight;
    
    //float heightThreshold = sin((float)globalVoxelPos.x / 16) * 8;
    
    VoxelData voxel;
    voxel.Volume = 0;
    voxel.MaterialHash = GetMaterialKeyHashByHeight(globalVoxelPos.y);
    
    if (globalVoxelPos.y < heightThreshold)
    {
        voxel.Volume = 1;
    } 
    
    ChunkData[i] = voxel;
}
