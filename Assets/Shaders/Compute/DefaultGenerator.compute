#pragma kernel CSMain
#include "PerlinNoise2D.compute"

struct VoxelData
{
    float Volume;
    int MaterialHash;
};

struct HeightAndMaterialHashAssociation
{
    float Height;
    int MaterialHash;
};

RWStructuredBuffer<VoxelData> ChunkData;
StructuredBuffer<HeightAndMaterialHashAssociation> HeightAndHashAssociations;
StructuredBuffer<HeightAndMaterialHashAssociation> MinMaxAssociations;
int ChunkWidth;
int ChunkHeight;
int ChunkDepth;
int ChunkGlobalPositionX;
int ChunkGlobalPositionY;
int ChunkGlobalPositionZ;
int MatHash;
int AssociationsCount;
int Octaves;
float Persistence;
float Frequency;
float Amplitude;
float MaxHeight;
float MinHeight;

int GetMaterialKeyHashByHeight(float height)
{
    HeightAndMaterialHashAssociation min = MinMaxAssociations[0];
    HeightAndMaterialHashAssociation max = MinMaxAssociations[1];
    
    if (height >= max.Height)
    {
        return max.MaterialHash;
    }
    else if (height <= min.Height)
    {
        return min.MaterialHash;
    }
    else
    {  
        int result = 0;
        if (AssociationsCount == 0)
        {
            return result;
        }
        
        for (int i = AssociationsCount - 1; i >= 0; i--)
        {
            HeightAndMaterialHashAssociation association = HeightAndHashAssociations[i];
            
            if (association.Height > height)
            {
                result = association.MaterialHash;
                break;
            }
        }
        
        return result;
    }
}

[numthreads(1, 1, 1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int i = id.x + id.y * ChunkWidth + id.z * (ChunkWidth * ChunkHeight);
    int3 globalPos = int3(ChunkGlobalPositionX + id.x, ChunkGlobalPositionY + id.y, ChunkGlobalPositionZ + id.z);
    
    float heightThreshold = CalculatePerlinNoise2D(
        float2(globalPos.x, globalPos.z), Amplitude, Frequency, Persistence, Octaves) * MaxHeight;
    
    VoxelData voxel;
    voxel.Volume = 0;
    voxel.MaterialHash = GetMaterialKeyHashByHeight(globalPos.y);
    
    if (globalPos.y < heightThreshold)
    {
        voxel.Volume = 1;
    } 
    
    ChunkData[i] = voxel;
}
